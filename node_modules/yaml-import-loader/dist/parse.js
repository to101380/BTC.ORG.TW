"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var YAML = require("js-yaml");
var path_1 = require("path");
var context_1 = require("./context");
var options_1 = require("./options");
var utils_1 = require("./utils");
var importFile = function (dir, file, checkExt) {
    if (checkExt === void 0) { checkExt = true; }
    return __awaiter(_this, void 0, void 0, function () {
        var data_1, error_1, location, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(file.startsWith('http://') || file.startsWith('https://'))) return [3, 2];
                    return [4, utils_1.request(file)];
                case 1:
                    data_1 = _a.sent();
                    return [2, { file: file, data: data_1 }];
                case 2:
                    if (checkExt && !path_1.extname(file)) {
                        return [2, importFile(dir, file, false)
                                .catch(function (err) { return (error_1 = err); })
                                .then(function () { return importFile(dir, file + '.yml'); })
                                .catch(function () { return importFile(dir, file + '.yaml'); })
                                .catch(function () { return importFile(dir, file + '.json'); })
                                .catch(function () { return Promise.reject(error_1); })];
                    }
                    location = file.startsWith('.')
                        ? path_1.join(dir, file)
                        : require.resolve(file);
                    return [4, utils_1.readFile(location)];
                case 3:
                    data = _a.sent();
                    return [2, { file: location, data: data }];
            }
        });
    });
};
var parseRootImports = function (context) { return __awaiter(_this, void 0, void 0, function () {
    var oldLines, newLines, _a, k, rk, regexStr, regex, _i, oldLines_1, line, match, name, _b, file, data, obj, _c, output, dependencies;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                oldLines = context.input.split('\n');
                newLines = [];
                _a = context.options, k = _a.importKeyword, rk = _a.importRawKeyword;
                regexStr = "^!(" + k + "|" + rk + ")\\s+(.*)(\\.ya?ml|\\.json)?['\"]?\\s*$";
                regex = new RegExp(regexStr);
                _i = 0, oldLines_1 = oldLines;
                _d.label = 1;
            case 1:
                if (!(_i < oldLines_1.length)) return [3, 7];
                line = oldLines_1[_i];
                match = line.match(regex);
                if (!match) {
                    newLines.push(line);
                    return [3, 6];
                }
                name = match[2];
                if ((name.startsWith("'") && name.endsWith("'")) ||
                    (name.startsWith('"') && name.endsWith('"')))
                    name = name.slice(1, -1);
                return [4, importFile(context.directory, name)];
            case 2:
                _b = _d.sent(), file = _b.file, data = _b.data;
                context.dependencies.add(file);
                obj = void 0;
                if (!!file.endsWith('.json')) return [3, 4];
                return [4, parseImports(new context_1.Context(data, file, context.options))];
            case 3:
                _c = _d.sent(), output = _c.output, dependencies = _c.dependencies;
                dependencies.forEach(function (dep) { return context.dependencies.add(dep); });
                obj = output;
                return [3, 5];
            case 4:
                obj = JSON.parse(data);
                _d.label = 5;
            case 5:
                newLines.push.apply(newLines, YAML.safeDump(obj).split('\n'));
                _d.label = 6;
            case 6:
                _i++;
                return [3, 1];
            case 7:
                context.input = newLines.join('\n');
                return [2, context];
        }
    });
}); };
var parseImports = function (context) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    var options, types, _i, _a, type, include, docs, parsed, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (!context.options.importRoot) return [3, 2];
                return [4, parseRootImports(context)];
            case 1:
                context = _d.sent();
                _d.label = 2;
            case 2:
                options = context.options;
                types = [];
                if (options.importNested && options.importKeyword) {
                    types.push(new YAML.Type('!' + options.importKeyword, {
                        kind: 'scalar',
                        construct: function (uri) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, file, data, _b, output, dependencies;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        context.resolveAsync = true;
                                        return [4, importFile(context.directory, uri)];
                                    case 1:
                                        _a = _c.sent(), file = _a.file, data = _a.data;
                                        context.dependencies.add(file);
                                        return [4, parseImports(new context_1.Context(data, file, context.options))];
                                    case 2:
                                        _b = _c.sent(), output = _b.output, dependencies = _b.dependencies;
                                        dependencies.forEach(function (dep) { return context.dependencies.add(dep); });
                                        return [2, output];
                                }
                            });
                        }); }
                    }));
                }
                if (options.importNested && options.importRawKeyword) {
                    types.push(new YAML.Type('!' + options.importRawKeyword, {
                        kind: 'scalar',
                        construct: function (uri) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, file, data;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        context.resolveAsync = true;
                                        return [4, importFile(context.directory, uri)];
                                    case 1:
                                        _a = _b.sent(), file = _a.file, data = _a.data;
                                        context.dependencies.add(file);
                                        return [2, data];
                                }
                            });
                        }); }
                    }));
                }
                if (options.parser.types) {
                    for (_i = 0, _a = options.parser.types; _i < _a.length; _i++) {
                        type = _a[_i];
                        if (typeof type === 'function')
                            types.push(type(context));
                        else
                            types.push(type);
                    }
                }
                include = !Array.isArray(options.parser.schema)
                    ? options.parser.schema instanceof YAML.Schema
                        ? [options.parser.schema]
                        : []
                    : options.parser.schema.filter(function (entry) { return entry instanceof YAML.Schema; });
                docs = [];
                YAML.safeLoadAll(context.input, function (doc) { return docs.push(doc); }, {
                    filename: context.filename,
                    schema: new YAML.Schema({ include: include, explicit: types }),
                    json: options.parser.allowDuplicate,
                    onWarning: options.parser.onWarning
                });
                parsed = docs.length > 1 ? docs : docs[0];
                _b = context;
                if (!context.resolveAsync) return [3, 4];
                return [4, utils_1.resolveNestedPromises(parsed)];
            case 3:
                _c = _d.sent();
                return [3, 5];
            case 4:
                _c = parsed;
                _d.label = 5;
            case 5:
                _b.output = _c;
                return [2, context];
        }
    });
}); };
exports.parse = function (param1, param2, param3) { return __awaiter(_this, void 0, void 0, function () {
    var hasSource, source, _a, path, opts, context, result;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                hasSource = typeof param2 === 'string';
                if (!hasSource) return [3, 1];
                _a = param1;
                return [3, 3];
            case 1: return [4, utils_1.readFile(param1)];
            case 2:
                _a = _b.sent();
                _b.label = 3;
            case 3:
                source = _a;
                path = hasSource ? param2 : param1;
                opts = (hasSource ? param3 : param2) || { parser: {} };
                context = new context_1.Context(source, path, options_1.getOptions(opts, !hasSource ? 'raw' : undefined));
                result = parseImports(context);
                return [2, hasSource ? result : result.then(function (ctx) { return ctx.output; })];
        }
    });
}); };
